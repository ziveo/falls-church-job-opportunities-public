import{ny as p,nz as g,hf as y,g1 as w,nA as I,fA as d,t as h,bl as b}from"./index.d90d4844.js";class _{constructor(){this.code=null,this.description=null}}class v{constructor(t){this.error=new _,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function f(e){return new v(e)}class q{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function V(e){return new q(e)}const u=new Set;function j(e,t,i,m=!1,a){u.clear();for(const r in i){const n=e.get(r);if(!n)continue;const l=i[r],s=P(n,l);if(s!==l&&a&&a.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:l,sanitizedValue:s}}),u.add(n.name),n&&(m||n.editable)){const c=p(n,s);if(c)return f(g(c,n,s));t[n.name]=s}}for(const r of e.requiredFields)if(!u.has(r.name))return f(`missing required field "${r.name}"`);return null}function P(e,t){let i=t;return typeof t=="string"&&y(e)?i=parseFloat(t):t!=null&&w(e)&&typeof t!="string"&&(i=String(t)),I(i)}let o;function z(e,t){if(!e||!d(t))return e;if("rings"in e||"paths"in e){if(h(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function A(){return h(o)&&(o=await b(()=>import("./geometryEngineJSON.ba1441a3.js"),["geometryEngineJSON.ba1441a3.js","geometryEngineBase.0f0d7ecf.js","geometryEngineJSON.5a1f200e.js","json.8bd707cf.js"],import.meta.url)),o}async function F(e,t){!d(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await A()}export{f as a,V as f,z as g,j as m,F as w};
